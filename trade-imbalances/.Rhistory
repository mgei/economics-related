rbinom(2, 6, 1)
rbinom(2, 6, 1)
rbinom(2, 6, 1)
rbinom(2, 6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
rep(sample(1:6, 1), 3)
rep(sample(1:6, 1), 3)
rep(sample(1:6, 1), 3)
rep(sample(1:6, 1), 3)
sample(1:6, 1)
sample(1:6, 2)
sample(1:6, 2)
sample(1:6, 2)
sample(1:6, 2)
sample(1:6, 2)
sample(1:6, 6)
sample(1:6, 6)
sample(1:6, 12)
times = 6
sample(rep(1:6, times), times)
sample(rep(1:6, times), times)
sample(rep(1:6, times), times)
sample(rep(1:6, times), times)
sample(rep(1:6, times), times)
?sample
sample(1:6, times, replace = T)
sample(1:6, times, replace = T)
sample(1:6, times, replace = T)
sample(1:6, times, replace = T) == 6
sample(1:6, times, replace = T) == 6 %>% sum()
sum(sample(1:6, times, replace = T) == 6)
sum(sample(1:6, times, replace = T) == 6)
sum(sample(1:6, times, replace = T) == 6)
sum(sample(1:6, times, replace = T) == 6)
sum(sample(1:6, times, replace = T) == 6)
sum(sample(1:6, times, replace = T) == 6)
sum(sample(1:6, times, replace = T) == 6)
dice()
dice <- function(reqnumber = 6, times = 6) {
sum(sample(1:6, times, replace = T) == reqnumber)
}
dice()
dice()
dice()
dice()
dice()
dice()
runif(n_draw, 0, 1)
dice()
dice <- function(reqnumber = 6, times = 6) {
sum(sample(1:6, times, replace = T) == reqnumber)
}
dice()
dice <- function(reqnumber = 6, times = 6, ttimes = 100) {
outcome <- c()
for (t in 1:ttimes) {
outcome <- c(outcome, sum(sample(1:6, times, replace = T) == reqnumber))
}
return(outcome)
}
dice()
dice()
dice()
dice()
dice() %>% mean()
dice() %>% mean()
dice() %>% mean()
dice() %>% mean()
dice(ttimes = 1000) %>% mean()
dice(ttimes = 1000) %>% mean()
dice(ttimes = 1000) %>% mean()
dice(ttimes = 1000) %>% mean()
dice(ttimes = 1000) %>% mean()
dice(ttimes = 1000) %>% mean()
dice(ttimes = 1000) %>% mean()
?invisible
?quantile
dice(ttimes = 1000)
dice(ttimes = 1000) %>% sum()
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
?rbinom
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(2)
runif(size)
rbinom(1,10,0.5)
rbinom(12,10,0.5)
myrbinom <- function(n, size, prob) {
res <- c()
for (i in 1:size) {
res <- c(res, sum(runif(size) < prob))
}
res
}
myrbinom(12, 10, 0.5)
myrbinom(12, 10, 0.5)
myrbinom(12, 10, 0.5)
myrbinom(12, 10, 0.5)
myrbinom(12, 10, 0.5)
myrbinom(12, 10, 0.5)
myrbinom(12, 10, 0.5)
myrbinom(12, 10, 0.5)
myrbinom(12, 10, 0.5)
myrbinom(12, 10, 0.5)
rbinom(12, 10, 0.5)
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom <- function(n, size, prob) {
res <- c()
for (i in 1:n) {
res <- c(res, sum(runif(size) < prob))
}
res
}
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.9)
rbinom(12, 10, 0.9)
myrbinom(12, 10, 0.9)
rbinom(12, 10, 0.9)
myrbinom(12, 10, 0.9)
rbinom(12, 10, 0.9)
rbinom()
rbinom
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
rbinom(n = 100000, size = 100, prob = 0.07)
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 1, size = 100, prob = 0.07) %>% mean()
rbinom(n = 1, size = 100, prob = 0.07) %>% mean()
rbinom(n = 1, size = 100, prob = 0.07) %>% mean()
rbinom(n = 1, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100, size = 1, prob = 0.07) %>% mean()
rbinom(n = 100, size = 100, prob = 0.07) %>% mean()
expectedprob <- 0.5
samples <- 10
tries <- 12
rbinom(samples, tries, expectedprob)
rbinom(samples, tries, expectedprob) %>% hist()
rbinom(samples, tries, expectedprob) %>% hist()
rbinom(samples, tries, expectedprob) %>% hist()
rbinom(samples, tries, expectedprob) %>% hist()
rbinom(samples, tries, expectedprob) %>% hist()
samples <- 1000
rbinom(samples, tries, expectedprob) %>% hist()
tries <- 1
rbinom(samples, tries, expectedprob) %>% hist()
samples <- 10000
rbinom(samples, tries, expectedprob) %>% hist()
tries <- 12
rbinom(samples, tries, expectedprob) %>% hist()
runif(1)
library(feedeR)
keyword <- "Radiologie"
url <- paste0("https://news.google.com/rss/search?q=",
keyword,
"&ie=utf-8&num=100&hl=de&gl=CH&ceid=CH:de")
feed <- feed.extract(url)
datatable(feed$items)
library(DT)
datatable(feed$items)
datatable(feed$items,
options = list(search = F))
datatable(feed$items,
options = list(dom = ''))
datatable(feed$items,
options = list(dom = 't'))
feed$items[c("title", as.Date(date))]
datatable(feed$items[c("title", "date")],
options = list(dom = 't'))
feed
datatable(feed$items[c("title", "date")],
options = list(dom = 't',
pagination = F))
install.packages("shiny")
# 1.1. Data processing
library(tidyverse)
R.version
install.packages(c("data.table", "DT", "feather", "ggplot2", "ggvis", "leaflet", "lubridate", "plotly", "readxl", "scales", "shiny", "shiny.i18n", "shinyjs", "stringi", "tidyverse", "timevis", "visNetwork"))
# 1.1. Data processing
library(tidyverse)
# 1.1. Data processing
library(tidyverse)
install.packages("tidyverse")
install.packages("modelr")
install.packages("broom")
library(ggplot2)
library(broom)
library(ggplot2)
library(timevis)
library(tidyverse)
installed.packages("tidyverse")
install.packages("tidyverse")
rm(.SLIDIFY_ENV)
ls(all.names = TRUE)
rm(.SLIDIFY_ENV)
install.packages("tidyverse")
install.packages("lattice")
install.packages("tidyverse")
library(tidyverse)
# 1.1. Data processing
library(tidyverse)
library(data.table)
library(lubridate)
library(feather)
# 1.2. UI packages
library(shiny)
library(shinyjs)
library(DT)
library(timevis)
library(ggplot2)
library(ggvis)
library(visNetwork)
library(scales)
library(plotly)
install.packages("plotly")
library(leaflet)
install.packages("leaflet")
library(plotly)
library(leaflet)
library(jsonlite)
library(shiny.i18n)
library(readxl)
library(stringi)
# 2.1.1. Header function
get_overview_header <- function(header_name) {
HTML(paste0("<div><h3><center>", header_name, "</center></h3></div>"))
}
format("2019-02-02")
format("2019-02-02", "%d")
format("2019-02-02", "%d. %M")
format(date("2019-02-02"), "%d. %M")
format(date("2019-02-02"), "%d. %M, %m")
format(date("2019-02-02"), "%d. %M, %MM")
format(date("2019-02-02"), "%d. %M, %M")
format(date("2019-02-02"), "%Y-%b-%d")
format(date("2019-12-02"), "%Y-%b-%d")
format(date("2019-12-02"), "%d %Y %b-%d")
format(date("2019-12-02"), "%A %Y %b-%d")
format(date("2019-12-02"), "%A")
format(date("2019-12-02"), "%A, %d. %b")
format(date("2019-12-02"), "%A, %d. %b. %Y")
runApp('Documents/R/rdashboard')
install.packages("V8")
runApp('Documents/R/rdashboard')
parse_date_time(date("2019-04-03"))
parse_date_time(date("2019-04-03"), "A, d. b Y")
parse_date_time(date("2019-04-03"), "A, d. b Y", locale = "usa")
parse_date_time(date("2019-04-03"), "B", locale = "usa")
parse_date_time(date("2019-04-03"), "B", locale = "us")
?parse_date_time
locale -a
parse_date_time(date("2019-04-03"), "B", locale = "en")
parse_date_time(date("2019-04-03"), "B", locale = "en_AG")
parse_date_time(date("2019-04-03"), "B", locale = "en_In")
parse_date_time(date("2019-04-03"), "B", locale = "en_IN")
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
library(shiny)
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
?geom_point
runApp('Documents/R/rdashboard')
mtcars
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
lubridate::hm("11:30")
lubridate::hm("11:30") %>% class()
runApp('Documents/R/rdashboard')
?hm
lubridate::hm("11:30")
lubridate::hm("11:30", roll = F)
lubridate::hm("11:30", roll = T)
runApp('Documents/R/rdashboard')
dmy_hm(paste0("2000-01-01 ", termine_start_time))
dmy_hm(paste0("2000-01-01 ", "13:12"))
dmy_hm(paste0("2000-01-01 ", "13:10"))
ymd_hm(paste0("2000-01-01 ", "13:10"))
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
cars
mtcars %>% head()
mtcars %>% head() %>% gather()
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
c_trans <- function(a, b, breaks = b$breaks, format = b$format) {
a <- as.trans(a)
b <- as.trans(b)
name <- paste(a$name, b$name, sep = "-")
trans <- function(x) a$trans(b$trans(x))
inv <- function(x) b$inverse(a$inverse(x))
trans_new(name, trans, inverse = inv, breaks = breaks, format=format)
}
rev_date <- c_trans("reverse", "time")
rev_date
runApp('Documents/R/rdashboard')
df_overview_termine_datatable() %>%
gather(event, time, -termine_modality, -patient_name, -doctor_name, -termine_bez, -termine_invoice_id) %>%
ggplot(aes(x = termine_modality, y = ymd_hm(paste0("2000-01-01 ", time)),
group = interaction(termine_invoice_id, termine_modality))) +
geom_path(size = 30) +
scale_y_datetime()
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
reorder?()
?reorder()
reorder(c("a", "c", "b"))
reorder(c("a", "c", "b"), c("a", "c", "b"))
reorder(c("a", "c", "b"), -c("a", "c", "b"))
InsectSprays
InsectSprays %>% head()
?with
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
minute
format(date("2019-02-02"), "%m")
format(ymd_hm("2019-02-02, 09:10"), "%m")
format(ymd_hm("2019-02-02, 09:10"), "%M")
format(ymd_hm("2019-02-02, 09:10"), "%H")
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
shiny::runApp('Documents/R/engagement-ring')
runApp('Documents/R/engagement-ring')
runApp('Documents/R/engagement-ring')
runApp('Documents/R/engagement-ring')
runApp('Documents/R/engagement-ring')
rings <- read_feather("rings.fth")
setwd("~/Documents/R/engagement-ring")
rings <- read_feather("rings.fth")
rings
setwd("~/Documents/R/gh-page")
library(blogdown)
serve_site()
stop_server()
serve_site()
stop_server()
ls
setwd("~/Documents/R/trade-imbalances")
install.packages("comtrader")
install.packages("comtradr")
library(contradr)
library(comtradr)
q <- ct_search(reporters = "USA",
partners = c("Germany", "France", "Japan", "Mexico"),
trade_direction = "imports")
rm(rings)
q
library(tidyverse)
q %>% glimpse()
q %>% as_tibble()
q %>%
as_tibble() %>%
filter(reporter == "USA", year == 2017)
q %>%
as_tibble() %>%
filter(reporter == "USA", year == 2017) %>%
select(trade_value_usd, cif_trade_value_usd, everything())
q %>%
as_tibble() %>%
filter(reporter == "USA", year == 2017) %>%
select(trade_value_usd, everything())
q %>%
as_tibble() %>%
filter(reporter == "USA", year == 2017) %>%
select(trade_value_usd, , reporter, partner, everything())
q %>%
as_tibble() %>%
filter(reporter == "USA", year == 2017) %>%
select(trade_value_usd, reporter, partner, everything())
q %>%
as_tibble() %>%
filter(reporter == "USA", partner == "Mexico", year == 2017) %>%
select(trade_value_usd, reporter, partner, everything())
q %>%
as_tibble() %>%
filter(reporter == "USA", partner == "Mexico") %>%
select(trade_value_usd, reporter, partner, everything())
q %>%
as_tibble() %>%
filter(reporter == "USA", partner == "Mexico") %>%
select(trade_value_usd, reporter, partner, everything()) %>%
ggplot(aes(x = year, y = trade_value_usd)) %>%
geom_line()
q %>%
as_tibble() %>%
filter(reporter == "USA", partner == "Mexico") %>%
select(trade_value_usd, reporter, partner, everything()) %>%
ggplot(aes(x = year, y = trade_value_usd)) +
geom_line()
q %>%
as_tibble() %>%
filter(reporter == "USA", partner == "Mexico") %>%
select(trade_value_usd, reporter, partner, everything()) %>%
ggplot(aes(x = year, y = trade_value_usd)) +
geom_vline(xintercept = 2018) +
geom_line()
q %>%
as_tibble() %>%
filter(reporter == "USA", partner == "Mexico") %>%
select(trade_value_usd, reporter, partner, everything()) %>%
ggplot(aes(x = year, y = trade_value_usd)) +
geom_vline(xintercept = 2017) +
geom_line()
?ct_search
221**2
221**2*12
250000/(221**2*12)
250000/(221**2*12*2)
250000/(221^2*12*2)
(221^2*12*2)/250000
(221^2*12)/250000
(221^2)/250000
ct_country_lookup("korea", "reporter")
ct_country_lookup("kore", "reporter")
ct_country_lookup("swi", "reporter")
ct_country_lookup("sw", "reporter")
ct_commodity_lookup("tomato",
return_code = TRUE,
return_char = TRUE)
ct_get_remaining_hourly_queries()
